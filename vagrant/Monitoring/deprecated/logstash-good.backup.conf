

input {
lumberjack{
port =>5000
type=> "log"
ssl_certificate => "/opt/certs/logstash-forwarder.crt"
ssl_key=> "/opt/private/logstash-forwarder.key"
}
  udp {
    port => 25826         # 25826 matches port specified in collectd.conf
    buffer_size => 1452   # 1452 is the default buffer size for Collectd
    codec => collectd { } # specific Collectd codec to invoke
    type => collectd
  }
}

filter{
if [type]=="nodemanager-metrics"{ #same as set in logstash-forwarder configuration json
  grok{
    break_on_match => false
    #metricssystem.MetricsSystem
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll:int}"]

    #ugi.UgiMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime}
    "]

    #jvm.JvmMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM}, MemHeapUsedM=%{NUMBER:MemHeapUsedM}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM}, MemHeapMaxM=%{NUMBER:MemHeapMaxM}, MemMaxM=%{NUMBER:MemMaxM}, GcCountParNew=%{NUMBER:GcCountParNew}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep}, GcCount=%{NUMBER:GcCount}, GcTimeMillis=%{NUMBER:GcTimeMillis}, ThreadsNew=%{NUMBER:ThreadsNew}, ThreadsRunnable=%{NUMBER:ThreadsRunnable}, ThreadsBlocked=%{NUMBER:ThreadsBlocked}, ThreadsWaiting=%{NUMBER:ThreadsWaiting}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting}, ThreadsTerminated=%{NUMBER:ThreadsTerminated}, LogFatal=%{NUMBER:LogFatal}, LogError=%{NUMBER:LogError}, LogWarn=%{NUMBER:LogWarn}, LogInfo=%{NUMBER:LogInfo}"]

    #yarn.NodeManagerMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, ContainersLaunched=%{NUMBER:ContainersLaunched}, ContainersCompleted=%{NUMBER:ContainersCompleted}, ContainersFailed=%{NUMBER:ContainersFailed}, ContainersKilled=%{NUMBER:ContainersKilled}, ContainersIniting=%{NUMBER:ContainersIniting}, ContainersRunning=%{NUMBER:ContainersRunning}, AllocatedGB=%{NUMBER:AllocatedGB}, AllocatedContainers=%{NUMBER:AllocatedContainers}, AvailableGB=%{NUMBER:AvailableGB}, AllocatedVCores=%{NUMBER:AllocatedVCores}, AvailableVCores=%{NUMBER:AvailableVCores}, ContainerLaunchDurationNumOps=%{NUMBER:ContainerLaunchDurationNumOps}, ContainerLaunchDurationAvgTime=%{NUMBER:ContainerLaunchDurationAvgTime}"]

    #mapred.ShuffleMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, ShuffleOutputBytes=%{NUMBER:ShuffleOutputBytes}, ShuffleOutputsFailed=%{NUMBER:ShuffleOutputsFailed}, ShuffleOutputsOK=%{NUMBER:ShuffleOutputsOK}, ShuffleConnections=%{NUMBER:ShuffleConnections}"]

    #rpc.rpc
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port}, Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, ReceivedBytes=%{NUMBER:ReceivedBytes}, SentBytes=%{NUMBER:SentBytes}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses}, NumOpenConnections=%{NUMBER:NumOpenConnections}, CallQueueLength=%{NUMBER:CallQueueLength}"]

    #rpcdetailed.rpcdetailed
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port}, Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}"]
  }
 }


if [type]=="datanode-metrics"{
  grok{
     break_on_match => false
     #metricssystem.MetricsSystem
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll:int}"]

    #ugi.UgiMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime}
    "]

    #jvm.JvmMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM}, MemHeapUsedM=%{NUMBER:MemHeapUsedM}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM}, MemHeapMaxM=%{NUMBER:MemHeapMaxM}, MemMaxM=%{NUMBER:MemMaxM}, GcCountParNew=%{NUMBER:GcCountParNew}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep}, GcCount=%{NUMBER:GcCount}, GcTimeMillis=%{NUMBER:GcTimeMillis}, GcNumWarnThresholdExceeded=%{NUMBER:GcNumWarnThresholdExceeded}, GcNumInfoThresholdExceeded=%{NUMBER:GcNumInfoThresholdExceeded}, GcTotalExtraSleepTime=%{NUMBER:GcTotalExtraSleepTime}, ThreadsNew=%{NUMBER:ThreadsNew}, ThreadsRunnable=%{NUMBER:ThreadsRunnable}, ThreadsBlocked=%{NUMBER:ThreadsBlocked}, ThreadsWaiting=%{NUMBER:ThreadsWaiting}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting}, ThreadsTerminated=%{NUMBER:ThreadsTerminated}, LogFatal=%{NUMBER:LogFatal}, LogError=%{NUMBER:LogError}, LogWarn=%{NUMBER:LogWarn}, LogInfo=%{NUMBER:LogInfo}"]

    #dfs.datanode
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: SessionId=%{WORD:SessionId}, Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, BytesWritten=%{NUMBER:BytesWritten}, BytesRead=%{NUMBER:BytesRead}, BlocksWritten=%{NUMBER:BlocksWritten}, BlocksRead=%{NUMBER:BlocksRead}, BlocksReplicated=%{NUMBER:BlocksReplicated}, BlocksRemoved=%{NUMBER:BlocksRemoved}, BlocksVerified=%{NUMBER:BlocksVerified}, BlockVerificationFailures=%{NUMBER:BlockVerificationFailures}, BlocksCached=%{NUMBER:BlocksCached}, BlocksUncached=%{NUMBER:BlocksUncached}, ReadsFromLocalClient=%{NUMBER:ReadsFromLocalClient}, ReadsFromRemoteClient=%{NUMBER:ReadsFromRemoteClient}, WritesFromLocalClient=%{NUMBER:WritesFromLocalClient}, WritesFromRemoteClient=%{NUMBER:WritesFromRemoteClient}, BlocksGetLocalPathInfo=%{NUMBER:BlocksGetLocalPathInfo}, RamDiskBlocksWrite=%{NUMBER:RamDiskBlocksWrite}, RamDiskBlocksWriteFallback=%{NUMBER:RamDiskBlocksWriteFallback}, RamDiskBytesWrite=%{NUMBER:RamDiskBytesWrite}, RamDiskBlocksReadHits=%{NUMBER:RamDiskBlocksReadHits}, RamDiskBlocksEvicted=%{NUMBER:RamDiskBlocksEvicted}, RamDiskBlocksEvictedWithoutRead=%{NUMBER:RamDiskBlocksEvictedWithoutRead}, RamDiskBlocksEvictionWindowMsNumOps=%{NUMBER:RamDiskBlocksEvictionWindowMsNumOps}, RamDiskBlocksEvictionWindowMsAvgTime=%{NUMBER:RamDiskBlocksEvictionWindowMsAvgTime}, RamDiskBlocksLazyPersisted=%{NUMBER:RamDiskBlocksLazyPersisted}, RamDiskBlocksDeletedBeforeLazyPersisted=%{NUMBER:RamDiskBlocksDeletedBeforeLazyPersisted}, RamDiskBytesLazyPersisted=%{NUMBER:RamDiskBytesLazyPersisted}, RamDiskBlocksLazyPersistWindowMsNumOps=%{NUMBER:RamDiskBlocksLazyPersistWindowMsNumOps}, RamDiskBlocksLazyPersistWindowMsAvgTime=%{NUMBER:RamDiskBlocksLazyPersistWindowMsAvgTime}, FsyncCount=%{NUMBER:FsyncCount}, VolumeFailures=%{NUMBER:VolumeFailures}, DatanodeNetworkErrors=%{NUMBER:DatanodeNetworkErrors}, ReadBlockOpNumOps=%{NUMBER:ReadBlockOpNumOps}, ReadBlockOpAvgTime=%{NUMBER:ReadBlockOpAvgTime}, WriteBlockOpNumOps=%{NUMBER:WriteBlockOpNumOps}, WriteBlockOpAvgTime=%{NUMBER:WriteBlockOpAvgTime}, BlockChecksumOpNumOps=%{NUMBER:BlockChecksumOpNumOps}, BlockChecksumOpAvgTime=%{NUMBER:BlockChecksumOpAvgTime}, CopyBlockOpNumOps=%{NUMBER:CopyBlockOpNumOps}, CopyBlockOpAvgTime=%{NUMBER:CopyBlockOpAvgTime}, ReplaceBlockOpNumOps=%{NUMBER:ReplaceBlockOpNumOps}, ReplaceBlockOpAvgTime=%{NUMBER:ReplaceBlockOpAvgTime}, HeartbeatsNumOps=%{NUMBER:HeartbeatsNumOps}, HeartbeatsAvgTime=%{NUMBER:HeartbeatsAvgTime}, BlockReportsNumOps=%{NUMBER:BlockReportsNumOps}, BlockReportsAvgTime=%{NUMBER:BlockReportsAvgTime}, CacheReportsNumOps=%{NUMBER:CacheReportsNumOps}, CacheReportsAvgTime=%{NUMBER:CacheReportsAvgTime}, PacketAckRoundTripTimeNanosNumOps=%{NUMBER:PacketAckRoundTripTimeNanosNumOps}, PacketAckRoundTripTimeNanosAvgTime=%{NUMBER:PacketAckRoundTripTimeNanosAvgTime}, FlushNanosNumOps=%{NUMBER:FlushNanosNumOps}, FlushNanosAvgTime=%{NUMBER:FlushNanosAvgTime}, FsyncNanosNumOps=%{NUMBER:FsyncNanosNumOps}, FsyncNanosAvgTime=%{NUMBER:FsyncNanosAvgTime}, SendDataPacketBlockedOnNetworkNanosNumOps=%{NUMBER:SendDataPacketBlockedOnNetworkNanosNumOps}, SendDataPacketBlockedOnNetworkNanosAvgTime=%{NUMBER:SendDataPacketBlockedOnNetworkNanosAvgTime}, SendDataPacketTransferNanosNumOps=%{NUMBER:SendDataPacketTransferNanosNumOps}, SendDataPacketTransferNanosAvgTime=%{NUMBER:SendDataPacketTransferNanosAvgTime}"]

    #rpc.rpc
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port}, Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}, ReceivedBytes=%{NUMBER:ReceivedBytes}, SentBytes=%{NUMBER:SentBytes}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses}, NumOpenConnections=%{NUMBER:NumOpenConnections}, CallQueueLength=%{NUMBER:CallQueueLength}"]

    #rpcdetailed.rpcdetailed
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port}, Context=%{WORD:context}, Hostname=%{WORD:hostname1}-%{WORD%{WORD:hostname2}-%{WORD:hostname3}"]
  }
}
}
output {
  elasticsearch {
    cluster  => logstash # this matches out elasticsearch cluster.name
    protocol => http
  }
}



