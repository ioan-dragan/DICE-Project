

input {
lumberjack{
port =>5000
type=> "log"
ssl_certificate => "/opt/certs/logstash-forwarder.crt"
ssl_key=> "/opt/private/logstash-forwarder.key"
}
  udp {
    port => 25826         # 25826 matches port specified in collectd.conf
    buffer_size => 1452   # 1452 is the default buffer size for Collectd
    codec => collectd { } # specific Collectd codec to invoke
    type => collectd
  }
}

filter{
if [type]=="nodemanager-metrics"{ #same as set in logstash-forwarder configuration json
  grok{
    break_on_match => false
    #metricssystem.MetricsSystem
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveSources=%{NUMBER:NumActiveSources}, NumAllSources=%{NUMBER:NumAllSources}, NumActiveSinks=%{NUMBER:NumActiveSinks}, NumAllSinks=%{NUMBER:NumAllSinks}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped}, Sink_diceQsize=%{NUMBER:Sink_diceQsize}, SnapshotNumOps=%{NUMBER:SnapshotNumOps}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll}"]

    #ugi.UgiMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}
    "]

    #jvm.JvmMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOST:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:int}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:int}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:int}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

    #yarn.NodeManagerMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, ContainersLaunched=%{NUMBER:ContainersLaunched:int}, ContainersCompleted=%{NUMBER:ContainersCompleted:int}, ContainersFailed=%{NUMBER:ContainersFailed:int}, ContainersKilled=%{NUMBER:ContainersKilled:int}, ContainersIniting=%{NUMBER:ContainersIniting}, ContainersRunning=%{NUMBER:ContainersRunning}, AllocatedGB=%{NUMBER:AllocatedGB}, AllocatedContainers=%{NUMBER:AllocatedContainers:int}, AvailableGB=%{NUMBER:AvailableGB:int}, AllocatedVCores=%{NUMBER:AllocatedVCores:int}, AvailableVCores=%{NUMBER:AvailableVCores:int}, ContainerLaunchDurationNumOps=%{NUMBER:ContainerLaunchDurationNumOps:int}, ContainerLaunchDurationAvgTime=%{NUMBER:ContainerLaunchDurationAvgTime:float}"]

    #mapred.ShuffleMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, ShuffleOutputBytes=%{NUMBER:ShuffleOutputBytes:int}, ShuffleOutputsFailed=%{NUMBER:ShuffleOutputsFailed:int}, ShuffleOutputsOK=%{NUMBER:ShuffleOutputsOK:int}, ShuffleConnections=%{NUMBER:ShuffleConnections:int}"]

    #rpc.rpc
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

    #rpcdetailed.rpcdetailed
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}"]
  }
 }


if [type]=="datanode-metrics"{
  grok{
     break_on_match => false
     #metricssystem.MetricsSystem
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll}"]

    #ugi.UgiMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}
    "]

    #jvm.JvmMetrics
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOST:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:int}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:int}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:int}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:int}, GcNumWarnThresholdExceeded=%{NUMBER:GcNumWarnThresholdExceeded:int}, GcNumInfoThresholdExceeded=%{NUMBER:GcNumInfoThresholdExceeded:int}, GcTotalExtraSleepTime=%{NUMBER:GcTotalExtraSleepTime:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

    #dfs.datanode
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: SessionId=%{WORD:SessionId}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, BytesWritten=%{NUMBER:BytesWritten:int}, BytesRead=%{NUMBER:BytesRead:int}, BlocksWritten=%{NUMBER:BlocksWritten:int}, BlocksRead=%{NUMBER:BlocksRead:int}, BlocksReplicated=%{NUMBER:BlocksReplicated:int}, BlocksRemoved=%{NUMBER:BlocksRemoved:int}, BlocksVerified=%{NUMBER:BlocksVerified:int}, BlockVerificationFailures=%{NUMBER:BlockVerificationFailures:int}, BlocksCached=%{NUMBER:BlocksCached:int}, BlocksUncached=%{NUMBER:BlocksUncached:int}, ReadsFromLocalClient=%{NUMBER:ReadsFromLocalClient:int}, ReadsFromRemoteClient=%{NUMBER:ReadsFromRemoteClient:int}, WritesFromLocalClient=%{NUMBER:WritesFromLocalClient:int}, WritesFromRemoteClient=%{NUMBER:WritesFromRemoteClient:int}, BlocksGetLocalPathInfo=%{NUMBER:BlocksGetLocalPathInfo:int}, RamDiskBlocksWrite=%{NUMBER:RamDiskBlocksWrite:int}, RamDiskBlocksWriteFallback=%{NUMBER:RamDiskBlocksWriteFallback:int}, RamDiskBytesWrite=%{NUMBER:RamDiskBytesWrite:int}, RamDiskBlocksReadHits=%{NUMBER:RamDiskBlocksReadHits:int}, RamDiskBlocksEvicted=%{NUMBER:RamDiskBlocksEvicted:int}, RamDiskBlocksEvictedWithoutRead=%{NUMBER:RamDiskBlocksEvictedWithoutRead:int}, RamDiskBlocksEvictionWindowMsNumOps=%{NUMBER:RamDiskBlocksEvictionWindowMsNumOps:int}, RamDiskBlocksEvictionWindowMsAvgTime=%{NUMBER:RamDiskBlocksEvictionWindowMsAvgTime:float}, RamDiskBlocksLazyPersisted=%{NUMBER:RamDiskBlocksLazyPersisted:int}, RamDiskBlocksDeletedBeforeLazyPersisted=%{NUMBER:RamDiskBlocksDeletedBeforeLazyPersisted:int}, RamDiskBytesLazyPersisted=%{NUMBER:RamDiskBytesLazyPersisted:int}, RamDiskBlocksLazyPersistWindowMsNumOps=%{NUMBER:RamDiskBlocksLazyPersistWindowMsNumOps:int}, RamDiskBlocksLazyPersistWindowMsAvgTime=%{NUMBER:RamDiskBlocksLazyPersistWindowMsAvgTime:float}, FsyncCount=%{NUMBER:FsyncCount:int}, VolumeFailures=%{NUMBER:VolumeFailures:int}, DatanodeNetworkErrors=%{NUMBER:DatanodeNetworkErrors:int}, ReadBlockOpNumOps=%{NUMBER:ReadBlockOpNumOps:int}, ReadBlockOpAvgTime=%{NUMBER:ReadBlockOpAvgTime:float}, WriteBlockOpNumOps=%{NUMBER:WriteBlockOpNumOps:int}, WriteBlockOpAvgTime=%{NUMBER:WriteBlockOpAvgTime:float}, BlockChecksumOpNumOps=%{NUMBER:BlockChecksumOpNumOps:int}, BlockChecksumOpAvgTime=%{NUMBER:BlockChecksumOpAvgTime:float}, CopyBlockOpNumOps=%{NUMBER:CopyBlockOpNumOps:int}, CopyBlockOpAvgTime=%{NUMBER:CopyBlockOpAvgTime:float}, ReplaceBlockOpNumOps=%{NUMBER:ReplaceBlockOpNumOps:int}, ReplaceBlockOpAvgTime=%{NUMBER:ReplaceBlockOpAvgTime:float}, HeartbeatsNumOps=%{NUMBER:HeartbeatsNumOps:int}, HeartbeatsAvgTime=%{NUMBER:HeartbeatsAvgTime:float}, BlockReportsNumOps=%{NUMBER:BlockReportsNumOps:int}, BlockReportsAvgTime=%{NUMBER:BlockReportsAvgTime:float}, CacheReportsNumOps=%{NUMBER:CacheReportsNumOps:int}, CacheReportsAvgTime=%{NUMBER:CacheReportsAvgTime:float}, PacketAckRoundTripTimeNanosNumOps=%{NUMBER:PacketAckRoundTripTimeNanosNumOps:int}, PacketAckRoundTripTimeNanosAvgTime=%{NUMBER:PacketAckRoundTripTimeNanosAvgTime:float}, FlushNanosNumOps=%{NUMBER:FlushNanosNumOps:int}, FlushNanosAvgTime=%{NUMBER:FlushNanosAvgTime:float}, FsyncNanosNumOps=%{NUMBER:FsyncNanosNumOps:int}, FsyncNanosAvgTime=%{NUMBER:FsyncNanosAvgTime:float}, SendDataPacketBlockedOnNetworkNanosNumOps=%{NUMBER:SendDataPacketBlockedOnNetworkNanosNumOps:int}, SendDataPacketBlockedOnNetworkNanosAvgTime=%{NUMBER:SendDataPacketBlockedOnNetworkNanosAvgTime:float}, SendDataPacketTransferNanosNumOps=%{NUMBER:SendDataPacketTransferNanosNumOps:int}, SendDataPacketTransferNanosAvgTime=%{NUMBER:SendDataPacketTransferNanosAvgTime:float}"]

    #rpc.rpc
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes}, SentBytes=%{NUMBER:SentBytes}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

    #rpcdetailed.rpcdetailed
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}"]
  }
}

if [type]=="resourcemanager-metrics"{
  grok{
    break_on_match => false
    #yarn.QueueMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Queue=%{USER:Queue}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, running_0=%{NUMBER:running_0:int}, running_60=%{NUMBER:running_60:int}, running_300=%{NUMBER:running_300:int}, running_1440=%{NUMBER:running_1440:int}, FairShareMB=%{NUMBER:FairShareMB:int}, FairShareVCores=%{NUMBER:FairShareVCores:int}, SteadyFairShareMB=%{NUMBER:SteadyFairShareMB:int}, SteadyFairShareVCores=%{NUMBER:SteadyFairShareVCores:int}, MinShareMB=%{NUMBER:MinShareMB:int}, MinShareVCores=%{NUMBER:MinShareVCores:int}, MaxShareMB=%{NUMBER:MaxShareMB:int}, MaxShareVCores=%{NUMBER:MaxShareVCores:int}, AppsSubmitted=%{NUMBER:AppsSubmitted:int}, AppsRunning=%{NUMBER:AppsRunning:int}, AppsPending=%{NUMBER:AppsPending:int}, AppsCompleted=%{NUMBER:AppsCompleted:int}, AppsKilled=%{NUMBER:AppsKilled:int}, AppsFailed=%{NUMBER:AppsFailed:int}, AllocatedMB=%{NUMBER:AllocatedMB:int}, AllocatedVCores=%{NUMBER:AllocatedVCores:int}, AllocatedContainers=%{NUMBER:AllocatedContainers:int}, AggregateContainersAllocated=%{NUMBER:AggregateContainersAllocated:int}, AggregateContainersReleased=%{NUMBER:AggregateContainersReleased:int}, AvailableMB=%{NUMBER:AvailableMB:int}, AvailableVCores=%{NUMBER:AvailableVCores:int}, PendingMB=%{NUMBER:PendingMB:int}, PendingVCores=%{NUMBER:PendingVCores:int}, PendingContainers=%{NUMBER:PendingContainers:int}, ReservedMB=%{NUMBER:ReservedMB:int}, ReservedVCores=%{NUMBER:ReservedVCores:int}, ReservedContainers=%{NUMBER:ReservedContainers:int}, ActiveUsers=%{NUMBER:ActiveUsers:int}, ActiveApplications=%{NUMBER:ActiveApplications:int}, AppAttemptFirstContainerAllocationDelayNumOps=%{NUMBER:AppAttemptFirstContainerAllocationDelayNumOps:int}, AppAttemptFirstContainerAllocationDelayAvgTime=%{NUMBER:AppAttemptFirstContainerAllocationDelayAvgTime:float}"]

    ##yarn.QueueMetrics(bis)
    match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Queue=%{WORD:Queue}, User=%{WORD:user}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, running_0=%{NUMBER:running_0:int}, running_60=%{NUMBER:running_60:int}, running_300=%{NUMBER:running_300:int}, running_1440=%{NUMBER:running_1440:int}, AppsSubmitted=%{NUMBER:AppsSubmitted:int}, AppsRunning=%{NUMBER:AppsRunning:int}, AppsPending=%{NUMBER:AppsPending:int}, AppsCompleted=%{NUMBER:AppsCompleted:int}, AppsKilled=%{NUMBER:AppsKilled:int}, AppsFailed=%{NUMBER:AppsFailed:int}, AllocatedMB=%{NUMBER:AllocatedMB:int}, AllocatedVCores=%{NUMBER:AllocatedVCores:int}, AllocatedContainers=%{NUMBER:AllocatedContainers:int}, AggregateContainersAllocated=%{NUMBER:AggregateContainersAllocated:int}, AggregateContainersReleased=%{NUMBER:AggregateContainersReleased:int}, AvailableMB=%{NUMBER:AvailableMB:int}, AvailableVCores=%{NUMBER:AvailableVCores:int}, PendingMB=%{NUMBER:PendingMB:int}, PendingVCores=%{NUMBER:PendingVCores:int}, PendingContainers=%{NUMBER:PendingContainers:int}, ReservedMB=%{NUMBER:ReservedMB:int}, ReservedVCores=%{NUMBER:ReservedVCores:int}, ReservedContainers=%{NUMBER:ReservedContainers:int}, ActiveUsers=%{NUMBER:ActiveUsers:int}, ActiveApplications=%{NUMBER:ActiveApplications:int}, AppAttemptFirstContainerAllocationDelayNumOps=%{NUMBER:AppAttemptFirstContainerAllocationDelayNumOps:int}, AppAttemptFirstContainerAllocationDelayAvgTime=%{NUMBER:AppAttemptFirstContainerAllocationDelayAvgTime:float}"]

     #rpc.rpc
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

     #rpcdetailed
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, RegisterNodeManagerNumOps=%{NUMBER:RegisterNodeManagerNumOps:int}, RegisterNodeManagerAvgTime=%{NUMBER:RegisterNodeManagerAvgTime:float}, NodeHeartbeatNumOps=%{NUMBER:NodeHeartbeatNumOps}, NodeHeartbeatAvgTime=%{NUMBER:NodeHeartbeatAvgTime:float}"]

     #rpcdetailed (bis)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, GetFileInfoNumOps=%{NUMBER:GetFileInfoNumOps:int}, GetFileInfoAvgTime=%{NUMBER:GetFileInfoAvgTime:float}, GetListingNumOps=%{NUMBER:GetListingNumOps:int}, GetListingAvgTime=%{NUMBER:GetListingAvgTime:float}, ListCacheDirectivesNumOps=%{NUMBER:ListCacheDirectivesNumOps:int}, ListCacheDirectivesAvgTime=%{NUMBER:ListCacheDirectivesAvgTime:float}, ListCachePoolsNumOps=%{NUMBER:ListCachePoolsNumOps:int}, ListCachePoolsAvgTime=%{NUMBER:ListCachePoolsAvgTime:float}, SafeModeExceptionNumOps=%{NUMBER:SafeModeExceptionNumOps:int}, SafeModeExceptionAvgTime=%{NUMBER:SafeModeExceptionAvgTime:float}, CreateNumOps=%{NUMBER:CreateNumOps:int}, CreateAvgTime=%{NUMBER:CreateAvgTime:float}, AddBlockNumOps=%{NUMBER:AddBlockNumOps:int}, AddBlockAvgTime=%{NUMBER:AddBlockAvgTime:float}, GetServerDefaultsNumOps=%{NUMBER:GetServerDefaultsNumOps:int}, GetServerDefaultsAvgTime=%{NUMBER:GetServerDefaultsAvgTime:float}, CompleteNumOps=%{NUMBER:CompleteNumOps:int}, CompleteAvgTime=%{NUMBER:CompleteAvgTime:int}, GetBlockLocationsNumOps=%{NUMBER:GetBlockLocationsNumOps:int}, GetBlockLocationsAvgTime=%{NUMBER:GetBlockLocationsAvgTime:float}, DeleteNumOps=%{NUMBER:DeleteNumOps:int}, DeleteAvgTime=%{NUMBER:DeleteAvgTime:float}"]

     #rpcdetailed (bis2)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, GetNewApplicationNumOps=%{NUMBER:GetNewApplicationNumOps:int}, GetNewApplicationAvgTime=%{NUMBER:GetNewApplicationAvgTime:float}, SubmitApplicationNumOps=%{NUMBER:SubmitApplicationNumOps:int}, SubmitApplicationAvgTime=%{NUMBER:SubmitApplicationAvgTime:float}, GetApplicationReportNumOps=%{NUMBER:GetApplicationReportNumOps:int}, GetApplicationReportAvgTime=%{NUMBER:GetApplicationReportAvgTime:float}, ApplicationNotFoundExceptionNumOps=%{NUMBER:ApplicationNotFoundExceptionNumOps:int}, ApplicationNotFoundExceptionAvgTime=%{NUMBER:ApplicationNotFoundExceptionAvgTime:float}"]

     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER:DroppedPubAll:int}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOST:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:int}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:int}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:int}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

     #yarn.ClusterMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: ClusterMetrics=%{WORD:ClusterMetrics}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveNMs=%{NUMBER:NumActiveNMs:int}, NumDecommissionedNMs=%{NUMBER:NumDecommissionedNMs:int}, NumLostNMs=%{NUMBER:NumLostNMs:int}, NumUnhealthyNMs=%{NUMBER:NumUnhealthyNMs:int}, NumRebootedNMs=%{NUMBER:NumRebootedNMs:int}, AMLaunchDelayNumOps=%{NUMBER:AMLaunchDelayNumOps:int}, AMLaunchDelayAvgTime=%{NUMBER:AMLaunchDelayAvgTime:float}, AMRegisterDelayNumOps=%{NUMBER:AMRegisterDelayNumOps:int}, AMRegisterDelayAvgTime=%{NUMBER:AMRegisterDelayAvgTime:float}"]

     #fairscheduler-op-durations.FSOpDurations
     match=>["message","\A%{NUMBER:job_id} %{NOTSPACE:serviceType}.%{WORD:serviceMetrics}: FSOpDurations=FSOpDurations, Context=%{NOTSPACE:context}, Hostname=%{HOST}, ContinuousSchedulingRunNumOps=%{NUMBER:ContinuousSchedulingRunNumOps:int}, ContinuousSchedulingRunAvgTime=%{NUMBER:ContinuousSchedulingRunAvgTime:float}, ContinuousSchedulingRunStdevTime=%{NUMBER:ContinuousSchedulingRunStdevTime:int}, ContinuousSchedulingRunIMinTime=%{NUMBER:ContinuousSchedulingRunIMinTime:int}, ContinuousSchedulingRunIMaxTime=%{NUMBER:ContinuousSchedulingRunIMaxTime:int}, ContinuousSchedulingRunMinTime=%{NUMBER:ContinuousSchedulingRunMinTime:int}, ContinuousSchedulingRunMaxTime=%{NUMBER:ContinuousSchedulingRunMaxTime:int}, NodeUpdateCallNumOps=%{NUMBER:NodeUpdateCallNumOps:int}, NodeUpdateCallAvgTime=%{NUMBER:NodeUpdateCallAvgTime:float}, NodeUpdateCallStdevTime=%{NUMBER:NodeUpdateCallStdevTime:int}, NodeUpdateCallIMinTime=%{NUMBER:NodeUpdateCallIMinTime:int}, NodeUpdateCallIMaxTime=%{NOTSPACE:NodeUpdateCallIMaxTime}, NodeUpdateCallMinTime=%{NUMBER:NodeUpdateCallMinTime:int}, NodeUpdateCallMaxTime=%{NUMBER:NodeUpdateCallMaxTime:int}, UpdateThreadRunNumOps=%{NUMBER:UpdateThreadRunNumOps:int}, UpdateThreadRunAvgTime=%{NUMBER:UpdateThreadRunAvgTime:float}, UpdateThreadRunStdevTime=%{NUMBER:UpdateThreadRunStdevTime:int}, UpdateThreadRunIMinTime=%{NUMBER:UpdateThreadRunIMinTime:int}, UpdateThreadRunIMaxTime=%{NUMBER:UpdateThreadRunIMaxTime:int}, UpdateThreadRunMinTime=%{NUMBER:UpdateThreadRunMinTime:int}, UpdateThreadRunMaxTime=%{NUMBER:UpdateThreadRunMaxTime:int}, UpdateCallNumOps=%{NUMBER:UpdateCallNumOps:int}, UpdateCallAvgTime=%{NUMBER:UpdateCallAvgTime:float}, UpdateCallStdevTime=%{NUMBER:UpdateCallStdevTime:int}, UpdateCallIMinTime=%{NUMBER:UpdateCallIMinTime:int}, UpdateCallIMaxTime=%{NUMBER:UpdateCallIMaxTime:int}, UpdateCallMinTime=%{NUMBER:UpdateCallMinTime:int}, UpdateCallMaxTime=%{NUMBER:UpdateCallMaxTime:int}, PreemptCallNumOps=%{NUMBER:PreemptCallNumOps:int}, PreemptCallAvgTime=%{NUMBER:PreemptCallAvgTime:float}, PreemptCallStdevTime=%{NUMBER:PreemptCallStdevTime:int}, PreemptCallIMinTime=%{NOTSPACE:PreemptCallIMinTime}, PreemptCallIMaxTime=%{NOTSPACE:PreemptCallIMaxTime}, PreemptCallMinTime=%{NOTSPACE:PreemptCallMinTime}, PreemptCallMaxTime=%{NOTSPACE:PreemptCallMaxTime}"]
  }
}

if [type]=="namenode-metrics"{
  grok{
    break_on_match => false
    #dfs.namenode
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, CreateFileOps=%{NUMBER:CreateFileOps:int}, FilesCreated=%{NUMBER:FilesCreated:int}, FilesAppended=%{NUMBER:FilesAppended:int}, GetBlockLocations=%{NUMBER:GetBlockLocations:int}, FilesRenamed=%{NUMBER:FilesRenamed:int}, GetListingOps=%{NUMBER:GetListingOps:int}, DeleteFileOps=%{NUMBER:DeleteFileOps:int}, FilesDeleted=%{NUMBER:FilesDeleted:int}, FileInfoOps=%{NUMBER:FileInfoOps:int}, AddBlockOps=%{NUMBER:AddBlockOps:int}, GetAdditionalDatanodeOps=%{NUMBER:GetAdditionalDatanodeOps:int}, CreateSymlinkOps=%{NUMBER:CreateSymlinkOps:int}, GetLinkTargetOps=%{NUMBER:GetLinkTargetOps:int}, FilesInGetListingOps=%{NUMBER:FilesInGetListingOps:int}, AllowSnapshotOps=%{NUMBER:AllowSnapshotOps:int}, DisallowSnapshotOps=%{NUMBER:DisallowSnapshotOps:int}, CreateSnapshotOps=%{NUMBER:CreateSnapshotOps:int}, DeleteSnapshotOps=%{NUMBER:DeleteSnapshotOps:int}, RenameSnapshotOps=%{NUMBER:RenameSnapshotOps:int}, ListSnapshottableDirOps=%{NUMBER:ListSnapshottableDirOps:int}, SnapshotDiffReportOps=%{NUMBER:SnapshotDiffReportOps:int}, BlockReceivedAndDeletedOps=%{NUMBER:BlockReceivedAndDeletedOps:int}, StorageBlockReportOps=%{NUMBER:StorageBlockReportOps:int}, TransactionsNumOps=%{NUMBER:TransactionsNumOps:int}, TransactionsAvgTime=%{NUMBER:TransactionsAvgTime:float}, SyncsNumOps=%{NUMBER:SyncsNumOps:int}, SyncsAvgTime=%{NUMBER:SyncsAvgTime:float}, TransactionsBatchedInSync=%{NUMBER:TransactionsBatchedInSync:int}, BlockReportNumOps=%{NUMBER:BlockReportNumOps:int}, BlockReportAvgTime=%{NUMBER:BlockReportAvgTime:float}, CacheReportNumOps=%{NUMBER:CacheReportNumOps:int}, CacheReportAvgTime=%{NUMBER:CacheReportAvgTime:float}, SafeModeTime=%{NUMBER:SafeModeTime:int}, FsImageLoadTime=%{NUMBER:FsImageLoadTime:int}, GetEditNumOps=%{NUMBER:GetEditNumOps:int}, GetEditAvgTime=%{NUMBER:GetEditAvgTime:float}, GetImageNumOps=%{NUMBER:GetImageNumOps:int}, GetImageAvgTime=%{NUMBER:GetImageAvgTime:float}, PutImageNumOps=%{NUMBER:PutImageNumOps:int}, PutImageAvgTime=%{NUMBER:PutImageAvgTime:float}"]

     #default.StartupProgress
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Hostname=%{HOST:hostname}, ElapsedTime=%{NUMBER:ElapsedTime}, PercentComplete=%{NUMBER:PercentComplete:float}, LoadingFsImageCount=%{NUMBER:LoadingFsImageCount:int}, LoadingFsImageElapsedTime=%{NUMBER:LoadingFsImageElapsedTime:int}, LoadingFsImageTotal=%{NUMBER:LoadingFsImageTotal}, LoadingFsImagePercentComplete=%{NUMBER:LoadingFsImagePercentComplete:int}, LoadingEditsCount=%{NUMBER:LoadingEditsCount:int}, LoadingEditsElapsedTime=%{NUMBER:LoadingEditsElapsedTime:int}, LoadingEditsTotal=%{NUMBER:LoadingEditsTotal:int}, LoadingEditsPercentComplete=%{NUMBER:LoadingEditsPercentComplete:float}, SavingCheckpointCount=%{NUMBER:SavingCheckpointCount:int}, SavingCheckpointElapsedTime=%{NUMBER:SavingCheckpointElapsedTime:int}, SavingCheckpointTotal=%{NUMBER:SavingCheckpointTotal}:int, SavingCheckpointPercentComplete=%{NUMBER:SavingCheckpointPercentComplete:float}, SafeModeCount=%{NUMBER:SafeModeCount:int}, SafeModeElapsedTime=%{NUMBER:SafeModeElapsedTime:int}, SafeModeTotal=%{NUMBER:SafeModeTotal:int}, SafeModePercentComplete=%{NUMBER:SafeModePercentComplete:float}"]

     #rpc.RetryCache.NameNodeRetryCache
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}.%{WORD:serviceMetrics2}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, CacheHit=%{NUMBER:CacheHit:int}, CacheCleared=%{NUMBER:CacheCleared:int}, CacheUpdated=%{NUMBER:CacheUpdated:int}"]

     #rpc.rpc
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

     #rpcdetailed.rpcdetailed
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, IOExceptionNumOps=%{NUMBER:IOExceptionNumOps:int}, IOExceptionAvgTime=%{NUMBER:IOExceptionAvgTime:float}, VersionRequestNumOps=%{NUMBER:VersionRequestNumOps:int}, VersionRequestAvgTime=%{NUMBER:VersionRequestAvgTime:float}, RegisterDatanodeNumOps=%{NUMBER:RegisterDatanodeNumOps:int}, RegisterDatanodeAvgTime=%{NUMBER:RegisterDatanodeAvgTime:float}, SendHeartbeatNumOps=%{NUMBER:SendHeartbeatNumOps:int}, SendHeartbeatAvgTime=%{NUMBER:SendHeartbeatAvgTime:float}, BlockReportNumOps=%{NUMBER:BlockReportNumOps:int}, BlockReportAvgTime=%{NUMBER:BlockReportAvgTime:float}, CacheReportNumOps=%{NUMBER:CacheReportNumOps:int}, CacheReportAvgTime=%{NUMBER:CacheReportAvgTime:float}, GetTransactionIdNumOps=%{NUMBER:GetTransactionIdNumOps:int}, GetTransactionIdAvgTime=%{NUMBER:GetTransactionIdAvgTime:float}, BlockReceivedAndDeletedNumOps=%{NUMBER:BlockReceivedAndDeletedNumOps:int}, BlockReceivedAndDeletedAvgTime=%{NUMBER:BlockReceivedAndDeletedAvgTime:float}, RollEditLogNumOps=%{NUMBER:RollEditLogNumOps:int}, RollEditLogAvgTime=%{NUMBER:RollEditLogAvgTime:float}, GetEditLogManifestNumOps=%{NUMBER:GetEditLogManifestNumOps:int}, GetEditLogManifestAvgTime=%{NUMBER:GetEditLogManifestAvgTime:float}"]

     #rpcdetailed.rpcdetailed (bis)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, GetFileInfoNumOps=%{NUMBER:GetFileInfoNumOps:int}, GetFileInfoAvgTime=%{NUMBER:GetFileInfoAvgTime:float}, GetListingNumOps=%{NUMBER:GetListingNumOps:int}, GetListingAvgTime=%{NUMBER:GetListingAvgTime:float}, SafeModeExceptionNumOps=%{NUMBER:SafeModeExceptionNumOps:int}, SafeModeExceptionAvgTime=%{NUMBER:SafeModeExceptionAvgTime:float}, DeleteNumOps=%{NUMBER:DeleteNumOps:int}, DeleteAvgTime=%{NUMBER:DeleteAvgTime:float}, ListCacheDirectivesNumOps=%{NUMBER:ListCacheDirectivesNumOps:int}, ListCacheDirectivesAvgTime=%{NUMBER:ListCacheDirectivesAvgTime:float}, ListCachePoolsNumOps=%{NUMBER:ListCachePoolsNumOps:int}, ListCachePoolsAvgTime=%{NUMBER:ListCachePoolsAvgTime:float}, CreateNumOps=%{NUMBER:CreateNumOps:int}, CreateAvgTime=%{NUMBER:CreateAvgTime:float}, AddBlockNumOps=%{NUMBER:AddBlockNumOps:int}, AddBlockAvgTime=%{NUMBER:AddBlockAvgTime:float}, GetServerDefaultsNumOps=%{NUMBER:GetServerDefaultsNumOps:int}, GetServerDefaultsAvgTime=%{NUMBER:GetServerDefaultsAvgTime:float}, CompleteNumOps=%{NUMBER:CompleteNumOps:int}, CompleteAvgTime=%{NUMBER:CompleteAvgTime:float}, GetBlockLocationsNumOps=%{NUMBER:GetBlockLocationsNumOps:int}, GetBlockLocationsAvgTime=%{NUMBER:GetBlockLocationsAvgTime:float}"]

     #rpcdetailed.rpcdetailed (bis2)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}"]

     #dfs.FSNamesystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, HAState=%{WORD:HAState}, Hostname=%{HOST:hostname}, MissingBlocks=%{NUMBER:MissingBlocks:int}, MissingReplOneBlocks=%{NUMBER:MissingReplOneBlocks:int}, ExpiredHeartbeats=%{NUMBER:ExpiredHeartbeats:int}, TransactionsSinceLastCheckpoint=%{NUMBER:TransactionsSinceLastCheckpoint:int}, TransactionsSinceLastLogRoll=%{NUMBER:TransactionsSinceLastLogRoll:int}, LastWrittenTransactionId=%{NUMBER:LastWrittenTransactionId:int}, LastCheckpointTime=%{NUMBER:LastCheckpointTime:int}, CapacityTotal=%{NUMBER:CapacityTotal:int}, CapacityTotalGB=%{NUMBER:CapacityTotalGB:float}, CapacityUsed=%{NUMBER:CapacityUsed:int}, CapacityUsedGB=%{NUMBER:CapacityUsedGB:float}, CapacityRemaining=%{NUMBER:CapacityRemaining:int}, CapacityRemainingGB=%{NUMBER:CapacityRemainingGB:float}, CapacityUsedNonDFS=%{NUMBER:CapacityUsedNonDFS:int}, TotalLoad=%{NUMBER:TotalLoad:int}, SnapshottableDirectories=%{NUMBER:SnapshottableDirectories:int}, Snapshots=%{NUMBER:Snapshots:int}, BlocksTotal=%{NUMBER:BlocksTotal:int}, FilesTotal=%{NUMBER:FilesTotal:int}, PendingReplicationBlocks=%{NUMBER:PendingReplicationBlocks:int}, UnderReplicatedBlocks=%{NUMBER:UnderReplicatedBlocks:int}, CorruptBlocks=%{NUMBER:CorruptBlocks:int}, ScheduledReplicationBlocks=%{NUMBER:ScheduledReplicationBlocks:int}, PendingDeletionBlocks=%{NUMBER:PendingDeletionBlocks:int}, ExcessBlocks=%{NUMBER:ExcessBlocks:int}, PostponedMisreplicatedBlocks=%{NUMBER:PostponedMisreplicatedBlocks:int}, PendingDataNodeMessageCount=%{NUMBER:PendingDataNodeMessageCount:int}, MillisSinceLastLoadedEdits=%{NUMBER:MillisSinceLastLoadedEdits:int}, BlockCapacity=%{NUMBER:BlockCapacity:int}, StaleDataNodes=%{NUMBER:StaleDataNodes:int}, TotalFiles=%{NUMBER:TotalFiles:int}"]


     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll:int}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOST:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:int}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:int}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:int}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:int}, GcNumWarnThresholdExceeded=%{NUMBER:GcNumWarnThresholdExceeded:int}, GcNumInfoThresholdExceeded=%{NUMBER:GcNumInfoThresholdExceeded:int}, GcTotalExtraSleepTime=%{NUMBER:GcTotalExtraSleepTime:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

  }
}

if [type]=="secondarynamenode-metrics"{
  grok{
    break_on_match => false
    #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER: DroppedPubAll:int}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOST:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NUMBER:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountParNew=%{NUMBER:GcCountParNew:int}, GcTimeMillisParNew=%{NUMBER:GcTimeMillisParNew:float}, GcCountConcurrentMarkSweep=%{NUMBER:GcCountConcurrentMarkSweep:float}, GcTimeMillisConcurrentMarkSweep=%{NUMBER:GcTimeMillisConcurrentMarkSweep:float}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:float}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]
  }
}

if [type]=="reducetask-metrics"{
    grok{
      break_on_match => false
     
     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=, Hostname=%{HOST:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NOTSPACE:MemNonHeapMaxM}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountPS Scavenge=%{NUMBER:GcCountPS_Scavenge:int}, GcTimeMillisPS_Scavenge=%{NUMBER:GcTimeMillisPS_Scavenge:int}, GcCountPS_MarkSweep=%{NUMBER:GcCountPS_MarkSweep:int}, GcTimeMillisPS_MarkSweep=%{NUMBER:GcTimeMillisPS_MarkSweep:int}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveSources=%{NUMBER:NumActiveSources:int}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER:DroppedPubAll:int}"]
    }
}

if [type]=="mrappmaster-metrics"{
    grok{
      break_on_match => false

     #jvm.JvmMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, ProcessName=%{WORD:ProcessName}, SessionId=%{WORD:SessionId}, Hostname=%{HOST:hostname}, MemNonHeapUsedM=%{NUMBER:MemNonHeapUsedM:float}, MemNonHeapCommittedM=%{NUMBER:MemNonHeapCommittedM:float}, MemNonHeapMaxM=%{NOTSPACE:MemNonHeapMaxM:float}, MemHeapUsedM=%{NUMBER:MemHeapUsedM:float}, MemHeapCommittedM=%{NUMBER:MemHeapCommittedM:float}, MemHeapMaxM=%{NUMBER:MemHeapMaxM:float}, MemMaxM=%{NUMBER:MemMaxM:float}, GcCountPS Scavenge=%{NUMBER:GcCountPS_Scavenge:int}, GcTimeMillisPS_Scavenge=%{NUMBER:GcTimeMillisPS_Scavenge:int}, GcCountPS MarkSweep=%{NUMBER:GcCountPS_MarkSweep:int}, GcTimeMillisPS_MarkSweep=%{NUMBER:GcTimeMillisPS_MarkSweep:int}, GcCount=%{NUMBER:GcCount:int}, GcTimeMillis=%{NUMBER:GcTimeMillis:int}, ThreadsNew=%{NUMBER:ThreadsNew:int}, ThreadsRunnable=%{NUMBER:ThreadsRunnable:int}, ThreadsBlocked=%{NUMBER:ThreadsBlocked:int}, ThreadsWaiting=%{NUMBER:ThreadsWaiting:int}, ThreadsTimedWaiting=%{NUMBER:ThreadsTimedWaiting:int}, ThreadsTerminated=%{NUMBER:ThreadsTerminated:int}, LogFatal=%{NUMBER:LogFatal:int}, LogError=%{NUMBER:LogError:int}, LogWarn=%{NUMBER:LogWarn:int}, LogInfo=%{NUMBER:LogInfo:int}"]

     #ugi.UgiMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, LoginSuccessNumOps=%{NUMBER:LoginSuccessNumOps:int}, LoginSuccessAvgTime=%{NUMBER:LoginSuccessAvgTime:float}, LoginFailureNumOps=%{NUMBER:LoginFailureNumOps:int}, LoginFailureAvgTime=%{NUMBER:LoginFailureAvgTime:float}, GetGroupsNumOps=%{NUMBER:GetGroupsNumOps:int}, GetGroupsAvgTime=%{NUMBER:GetGroupsAvgTime:float}"]

     #mapred.MRAppMetrics
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, JobsSubmitted=%{NUMBER:JobsSubmitted:int}, JobsCompleted=%{NUMBER:JobsCompleted:int}, JobsFailed=%{NUMBER:JobsFailed:int}, JobsKilled=%{NUMBER:JobsKilled:int}, JobsPreparing=%{NUMBER:JobsPreparing:int}, JobsRunning=%{NUMBER:JobsRunning:int}, MapsLaunched=%{NUMBER:MapsLaunched:int}, MapsCompleted=%{NUMBER:MapsCompleted:int}, MapsFailed=%{NUMBER:MapsFailed:int}, MapsKilled=%{NUMBER:MapsKilled:int}, MapsRunning=%{NUMBER:MapsRunning:int}, MapsWaiting=%{NUMBER:MapsWaiting:int}, ReducesLaunched=%{NUMBER:ReducesLaunched:int}, ReducesCompleted=%{NUMBER:ReducesCompleted:int}, ReducesFailed=%{NUMBER:ReducesFailed:int}, ReducesKilled=%{NUMBER:ReducesKilled:int}, ReducesRunning=%{NUMBER:ReducesRunning:int}, ReducesWaiting=%{NUMBER:ReducesWaiting:int}"]

     #rpc.rpc
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, ReceivedBytes=%{NUMBER:ReceivedBytes:int}, SentBytes=%{NUMBER:SentBytes:int}, RpcQueueTimeNumOps=%{NUMBER:RpcQueueTimeNumOps:int}, RpcQueueTimeAvgTime=%{NUMBER:RpcQueueTimeAvgTime:float}, RpcProcessingTimeNumOps=%{NUMBER:RpcProcessingTimeNumOps:int}, RpcProcessingTimeAvgTime=%{NUMBER:RpcProcessingTimeAvgTime:float}, RpcAuthenticationFailures=%{NUMBER:RpcAuthenticationFailures:int}, RpcAuthenticationSuccesses=%{NUMBER:RpcAuthenticationSuccesses:int}, RpcAuthorizationFailures=%{NUMBER:RpcAuthorizationFailures:int}, RpcAuthorizationSuccesses=%{NUMBER:RpcAuthorizationSuccesses:int}, NumOpenConnections=%{NUMBER:NumOpenConnections:int}, CallQueueLength=%{NUMBER:CallQueueLength:int}"]

     #rpcdetailed
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, GetJobReportNumOps=%{NUMBER:GetJobReportNumOps:int}, GetJobReportAvgTime=%{NUMBER:GetJobReportAvgTime:float}, GetTaskAttemptCompletionEventsNumOps=%{NUMBER:GetTaskAttemptCompletionEventsNumOps:int}, GetTaskAttemptCompletionEventsAvgTime=%{NUMBER:GetTaskAttemptCompletionEventsAvgTime:float}"]

     #rpcdetailed (bis)
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: port=%{NUMBER:port:int}, Context=%{WORD:context}, Hostname=%{HOST:hostname}, DoneNumOps=%{NUMBER:DoneNumOps:int}, DoneAvgTime=%{NUMBER:DoneAvgTime:float}, FatalErrorNumOps=%{NUMBER:FatalErrorNumOps:int}, FatalErrorAvgTime=%{NUMBER:FatalErrorAvgTime:float}, GetTaskNumOps=%{NUMBER:GetTaskNumOps:int}, GetTaskAvgTime=%{NUMBER:GetTaskAvgTime:float}, CanCommitNumOps=%{NUMBER:CanCommitNumOps:int}, CanCommitAvgTime=%{NUMBER:CanCommitAvgTime:float}, CommitPendingNumOps=%{NUMBER:CommitPendingNumOps:int}, CommitPendingAvgTime=%{NUMBER:CommitPendingAvgTime:float}, FsErrorNumOps=%{NUMBER:FsErrorNumOps:int}, FsErrorAvgTime=%{NUMBER:FsErrorAvgTime:float}, ShuffleErrorNumOps=%{NUMBER:ShuffleErrorNumOps:int}, ShuffleErrorAvgTime=%{NUMBER:ShuffleErrorAvgTime:float}, GetMapCompletionEventsNumOps=%{NUMBER:GetMapCompletionEventsNumOps:int}, GetMapCompletionEventsAvgTime=%{NUMBER:GetMapCompletionEventsAvgTime:float}, PingNumOps=%{NUMBER:PingNumOps}, PingAvgTime=%{NUMBER:PingAvgTime:float}, ReportDiagnosticInfoNumOps=%{NUMBER:ReportDiagnosticInfoNumOps:float}, ReportDiagnosticInfoAvgTime=%{NUMBER:ReportDiagnosticInfoAvgTime:float}, StatusUpdateNumOps=%{NUMBER:StatusUpdateNumOps:int}, StatusUpdateAvgTime=%{NUMBER:StatusUpdateAvgTime:float}, ReportNextRecordRangeNumOps=%{NUMBER:ReportNextRecordRangeNumOps:int}, ReportNextRecordRangeAvgTime=%{NUMBER:ReportNextRecordRangeAvgTime:float}"]

     #metricssystem.MetricsSystem
     match=>["message","\A%{NUMBER:job_id} %{WORD:serviceType}.%{WORD:serviceMetrics}: Context=%{WORD:context}, Hostname=%{HOST:hostname}, NumActiveSources=%{NUMBER:NumActiveSources}, NumAllSources=%{NUMBER:NumAllSources:int}, NumActiveSinks=%{NUMBER:NumActiveSinks:int}, NumAllSinks=%{NUMBER:NumAllSinks:int}, Sink_diceNumOps=%{NUMBER:Sink_diceNumOps:int}, Sink_diceAvgTime=%{NUMBER:Sink_diceAvgTime:float}, Sink_diceDropped=%{NUMBER:Sink_diceDropped:int}, Sink_diceQsize=%{NUMBER:Sink_diceQsize:int}, SnapshotNumOps=%{NUMBER:SnapshotNumOps:int}, SnapshotAvgTime=%{NUMBER:SnapshotAvgTime:float}, PublishNumOps=%{NUMBER:PublishNumOps:int}, PublishAvgTime=%{NUMBER:PublishAvgTime:float}, DroppedPubAll=%{NUMBER:DroppedPubAll:int}"]
    }
}

}
output {
  elasticsearch {
    cluster  => logstash # this matches out elasticsearch cluster.name
    protocol => http
  }
}



